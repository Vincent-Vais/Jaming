{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["token","expiresIn","SearchBar","props","state","search","bind","handleTermChange","this","onSearch","term","e","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","url","window","location","href","tokenArr","match","expiresInArr","parseInt","setTimeout","history","pushState","process","a","fetch","headers","Authorization","response","json","data","items","item","artists","uri","savePlaylist","uris","accessToken","userResp","userData","userID","method","body","JSON","stringify","playlistID","console","log","App","playlistName","updatePlaylistName","findIndex","push","newPlaylist","filter","trackURIs","then","catch","err","res","Array","from","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.912bc687.chunk.js","sourcesContent":["let token;\nlet expiresIn;\nconst redirectURL = \"http://localhost:3000/\";\nconst clientID = process.env.REACT_APP_CLIENT_ID;\n\nconst Spotify = {\n    getAccessToken: function(){\n        if(token){\n            return token;\n        }\n        let url = window.location.href;\n        let tokenArr = url.match(/access_token=([^&]*)/);\n        let expiresInArr = url.match(/expires_in=([^&]*)/);\n        if(tokenArr && expiresInArr){\n            token = tokenArr[1];\n            expiresIn = parseInt(expiresInArr[1]);\n            window.setTimeout(() => token = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n        }else{\n            window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n        }\n        return token;\n    },\n    search: async function(term){\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {Authorization: `Bearer ${token}`}\n        });\n        const data = await response.json();\n        return data.tracks.items.map(item => {\n            const track = {\n                id: item.id,\n                name: item.name,\n                artist: item.artists[0].name,\n                album: item.album.name,\n                uri: item.uri\n            };\n            return track;\n        });\n    },\n    savePlaylist: async function(name, uris){\n        if(!name || !uris){\n            return ;\n        }\n        let accessToken = Spotify.getAccessToken();\n        let headers = {Authorization: `Bearer ${accessToken}`}\n        let userID;\n        let playlistID;\n        const userResp = await fetch(`https://api.spotify.com/v1/me`, {\n            headers: headers\n        });\n        const userData = await userResp.json();\n        userID = userData.id;\n        const response = await fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({name: name})\n        });\n        const data = await response.json();\n        playlistID = data.id;\n        console.log(uris);\n        const res = await fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`,{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({\"uris\": uris})\n        })\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {};\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    search(){\n        this.props.onSearch(this.state.term);\n    }\n    handleTermChange(e){\n        this.setState({term: e.target.value});\n    }\n    render(){\n        return (\n        <div className=\"SearchBar\">\n            <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n            <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n        </div>\n      );\n    }\n}","import React from 'react';\nimport './Track.css';\n\n\nexport class Track extends React.Component{\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    addTrack(){\n        this.props.onAdd(this.props.track);\n    }\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n    }\n    renderAction(){\n        return this.props.isRemoval ? <button onClick={this.removeTrack} className=\"Track-action\">-</button> : <button onClick={this.addTrack} className=\"Track-action\">+</button> ;\n    }\n    render(){\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './TrackList.css';\nimport {Track} from '../Track/Track';\n\nexport class TrackList extends React.Component{\n    render(){\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => <Track isRemoval={this.props.isRemoval} onRemove={this.props.onRemove} onAdd={this.props.onAdd} key={track.id} track={track}/>)}\n            </div>\n        ); \n    }\n}","import React from 'react';\nimport './SearchResults.css';\nimport {TrackList} from '../TrackList/TrackList';\n\nexport class SearchResults extends React.Component{\n    render(){\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList isRemoval={false} onAdd={this.props.onAdd} tracks={this.props.searchResults} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Playlist.css';\nimport {TrackList} from '../TrackList/TrackList';\n\nexport class Playlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    handleNameChange(e){\n        this.props.onNameChange(e.target);\n    }\n\n    render(){\n        return (\n            <div className=\"Playlist\">\n                <input onChange={this.handleNameChange} defaultValue={\"New Playlist\"}/>\n                <TrackList onRemove={this.props.onRemove} isRemoval={true} tracks={this.props.playlistTracks} />\n                <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nexport class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"First Playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    if(this.state.playlistTracks.findIndex(item => item.id === track.id) === -1){\n      this.state.playlistTracks.push(track)\n      this.setState({playlistTracks : this.state.playlistTracks});\n    }\n  }\n\n  removeTrack(track){\n    const newPlaylist = this.state.playlistTracks.filter(item => item.id !== track.id);\n    this.setState({playlistTracks: newPlaylist});\n  }\n\n  updatePlaylistName(name){\n    this.setState({name: name});\n  }\n\n  savePlaylist(){\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    .then(this.setState({playlistName: 'New Playlist', playlistTracks : []}))\n    .catch(err => console.log(err));\n  }\n\n  search(term){\n    Spotify.search(term)\n    .then(res => this.setState({searchResults: Array.from(res)}))\n    .catch(err => console.log(err));\n  }\n\n  render(){\n    Spotify.getAccessToken();\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults}/>\n            <Playlist onSave={this.savePlaylist} onNameChange={this.updatePlaylistName} onRemove={this.removeTrack} playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}